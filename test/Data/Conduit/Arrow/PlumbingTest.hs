-- res :: IO [Int]
-- res = CC.yieldMany [1 .. 5]
--   =$= addCleanup (\b -> print (b, "a")) (CC.map id)
--   =$= getZipConduit (ZipConduit (addCleanup (\b -> print (b, "l1")) (CC.map id) =$=
--                                  addCleanup (\b -> print (b, "l2")) (CC.map id)) *>
--                      ZipConduit (addCleanup (\b -> print (b, "r1")) (CC.map id) =$=
--                                  addCleanup (\b -> print (b, "r2")) (CC.map id)))
--   =$= addCleanup (\b -> print (b, "b")) (CC.map id)
--   $$ CC.sinkList

-- resZ :: IO [(Int, Int)]
-- resZ = CC.yieldMany [1 .. 5]
--   =$= addCleanup (\b -> print (b, "a")) (CC.map id)
--   =$= ((addCleanup (\b -> print (b, "l1")) (CC.map id) =$=
--         addCleanup (\b -> print (b, "l2")) (CC.map id)) `zip`
--        (addCleanup (\b -> print (b, "r1")) (CC.map id) =$=
--         addCleanup (\b -> print (b, "r2")) (CC.map id)))
--   =$= addCleanup (\b -> print (b, "b")) (CC.map id)
--   $$ CC.sinkList

-- resZM :: IO [(Int, Int)]
-- resZM = CC.yieldMany [1 .. 5]
--   =$= addCleanup (\b -> print (b, "a")) (CC.map id)
--   =$= ((addCleanup (\b -> print (b, "l1")) (CC.map id) =$=
--         addCleanup (\b -> print (b, "l2")) (CC.mapM pure)) `zip`
--        (addCleanup (\b -> print (b, "r1")) (CC.map id) =$=
--         addCleanup (\b -> print (b, "r2")) (CC.map id)))
--   =$= addCleanup (\b -> print (b, "b")) (CC.map id)
--   $$ CC.sinkList
